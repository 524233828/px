<?php
/**
 * Created by PhpStorm.
 * User: chenyu
 * Date: 2020-11-10
 * Time: 11:12
 */

namespace App\Admin\Extensions\Form\Field;


use Encore\Admin\Admin;
use Encore\Admin\Form\Field;
use Illuminate\Support\Arr;
use Illuminate\Support\Str;

class WeekTimeSelector extends Field
{
    private $weekField = "week";
    private $timeField = "time";
    /** @var array $css */
    protected static $css = [
        '/vendor/laravel-admin/AdminLTE/plugins/iCheck/all.css',
    ];

    protected static $js = [
        '/vendor/laravel-admin/AdminLTE/plugins/iCheck/icheck.min.js',
    ];

    /** @var string $view 视图 */
    protected $view = "form.field.weekTimeSelector";


    public function relatedField($weekField, $timeField)
    {
        $this->weekField = $weekField;
        $this->timeField = $timeField;

        return $this;
    }

    private function script()
    {

    }

    /**
     * 渲染
     * @return \Illuminate\Contracts\View\Factory|\Illuminate\View\View|string
     */
    public function render()
    {
        $this->addVariables(["week" =>$this->weekField, "time" => $this->timeField]);
//        $this->variables = array_merge($this->variables, ["id_name" => $this->getIdName()]);
        Admin::script($this->script());
        return parent::render(); // TODO: Change the autogenerated stub
    }

    /**
     * 填充回显数据
     * @param array $data
     */
    public function fill($data)
    {
        if ($this->form && $this->form->shouldSnakeAttributes()) {
            $key = Str::snake($this->column);
        } else {
            $key = $this->column;
        }

        if (Str::contains($key, '.')) {
            list($relation_key) = explode('.', $key);
            $relations = Arr::get($data, $relation_key);
        } else {
            $relations = Arr::get($data, $key);
        }

        if (is_string($relations)) {
            $this->value = explode(',', $relations);
        }

        if (!is_array($relations)) {
            return;
        }

        $first = current($relations);

        if (is_null($first)) {
            $this->value = null;

            return;

        } elseif (is_array($first) && !empty($this->otherKey)) {
            foreach ($relations as $relation) {
                $this->value[] = Arr::get($relation, $this->otherKey);
            }

            // MultipleSelect value store as a column.
        } elseif (is_array($relations) && !empty($this->otherKey)) {
            $this->value = explode(",", Arr::get($relations, $this->otherKey));
        } else {
            $this->value[] = $relations;
        }
    }

    /**
     * 返回入库数据结构
     * @param $value
     * @return array|mixed
     */
    public function prepare($value)
    {
        if (method_exists($this->form->model(), $this->relationKey)
        ) {
            if ($this->form->model()->{$this->relationKey}() instanceof HasMany) {
                if (isset($this->otherKey) && isset($value[$this->otherKey])) {
                    $values = explode(",", $value[$this->otherKey]);
                    $value = [];

                    //获取已有的关系
                    $collection = $this->form->model()->{$this->relationKey};
                    /** @var \Iterator $related */
                    $related = $collection->getIterator();
                    // 自动复用记录
                    foreach ($values as $item) {
                        /** @var Model $current */
                        if ($current = $related->current()) {
                            //更新
                            $value[] = [
                                $current->getKeyName() => $current->getKey(),
                                $this->otherKey => $item,
                                Form::REMOVE_FLAG_NAME => 0,
                            ];
                            $related->next();
                        } else {
                            //新增
                            $value[] = [
                                $this->otherKey => $item,
                                Form::REMOVE_FLAG_NAME => 0,
                            ];
                        }
                    }
                    // 清理多余的记录
                    while ($current = $related->current()) {
                        //删除
                        $value[] = [
                            $current->getKeyName() => $current->getKey(),
                            Form::REMOVE_FLAG_NAME => 1,
                        ];
                        $related->next();
                    }
                }
            }
        }
        return $value;
    }
}
